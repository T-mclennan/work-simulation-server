#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */
const { app, sessionStore } = require("../app");
const http = require("http");
const { v4: uuidv4 } = require('uuid');
const db = require("../db");
const onlineUsers = require("../onlineUsers");
const {validateSocket} = require('./../middleware/validateUser')

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */
const io = require("socket.io")(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"],
  }
});

//Authentication middleware for socket.io
require('socketio-auth')(io, {
  authenticate: validateSocket
});


io.on("connection", (socket) => {
  const socketId = uuidv4();
  socket.join(socketId);
  //Create a private room for each user denoted by socketId. 
  
  socket.on("go-online", (id) => {
  // onlineUsers is a Map - {id: socketId}
    onlineUsers.set(id, socketId)

    // send the user who just went online to everyone else who is already online
    socket.broadcast.emit("add-online-user", id);
  });

  //Broadcast the message to room of specific user, where destinationId is the 
  //recipient's socketId. 
  socket.on("new-message", (data) => {
    const {message, recipientId, sender } = data;
    if (recipientId) {
      const destinationId = onlineUsers.get(recipientId)
      socket.broadcast.to(destinationId).emit("new-message", {
        message,
        sender,
      });
    } else {
      console.log(`User of recipientId: ${recipientId} not found in onlineUsers.`)
    }
  });

  //Broadcasts user typing events - action can be 'isTyping' or 'stoppedTyping'.
  socket.on("user-typing", (data) => {
    const {convoId, recepientId, action } = data;
    if (recepientId) {
      const destinationId = onlineUsers.get(recepientId)
      socket.broadcast.to(destinationId).emit("user-is-typing", {
        convoId,
        recepientId,
        action
      });
    } else {
      console.log(`User of recipientId: ${recipientId} not found in onlineUsers.`)
    }
  });

  socket.on("message-seen", (data) => {
    const { convoId, messageId, senderId } = data;
    socket.broadcast.emit("message-seen", {
      convoId, messageId, senderId
    });
  });

  socket.on("logout", (id) => {
    if (onlineUsers.has(id)) {
      onlineUsers.delete(id);
      socket.broadcast.emit("remove-offline-user", id);
    }
  });

  socket.on("disconnect", () => {
    for (let [key, value] of onlineUsers.entries()) {
      if (value === socketId) {
        onlineUsers.delete(key)
        socket.broadcast.emit("remove-offline-user", key);
      }
    }
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
